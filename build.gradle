buildscript {
    repositories {
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.35'
    }
}

description = 'Micrometer Samples'

allprojects {
    group = 'com.example.micrometersamples'
    version = '0.1.0-SNAPSHOT'

    afterEvaluate { project -> println "I'm configuring $project.name with version $project.version" }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'io.spring.javaformat'
    apply plugin: 'maven-publish'

    java {
        registerFeature('optional') {
            usingSourceSet(sourceSets.main)
        }

        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://repo.spring.io/milestone/' // we only need this repo for the context-propagation
            content { includeModule 'io.micrometer', 'context-propagation' }
        }
    }

    dependencies {
        checkstyle 'io.spring.javaformat:spring-javaformat-checkstyle:latest.release'
    }

    tasks {
        compileJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'

            doLast {
                task -> logger.info("Compiling with " + task.javaCompiler.get().executablePath)
            }
        }
        compileTestJava {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
        }

        javadoc {
                enabled = false
        }
    }

    //noinspection GroovyAssignabilityCheck
    test {
        useJUnitPlatform()
    }

    project.tasks.withType(Test) { Test testTask ->
        testTask.testLogging.exceptionFormat = 'full'
    }

    if (project.name != "acceptance-tests") {
        apply plugin: 'org.springframework.boot'

        publishing {
            publications {
                bootJava(MavenPublication) {
                    artifact tasks.named("bootJar")
                }
            }
        }
    }

}

wrapper {
    gradleVersion = '7.5.1'
}

defaultTasks 'build'
